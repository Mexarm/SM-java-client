/*
 * Scrum Metrics API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Allupdbody;
import io.swagger.client.model.Currsprint;
import io.swagger.client.model.Deletemember;
import io.swagger.client.model.Deluserbody;
import io.swagger.client.model.Editstory;
import io.swagger.client.model.Emailupdbody;
import io.swagger.client.model.Endsprint;
import io.swagger.client.model.Getsprints;
import io.swagger.client.model.Getstories;
import io.swagger.client.model.Lastprojectbody;
import io.swagger.client.model.Loginbody;
import io.swagger.client.model.Memberbody;
import io.swagger.client.model.Movestory;
import io.swagger.client.model.Nameupdbody;
import io.swagger.client.model.Nextsprint;
import io.swagger.client.model.Passupdbody;
import io.swagger.client.model.Postprojectbody;
import io.swagger.client.model.Postuserbody;
import io.swagger.client.model.Projectinfobody;
import io.swagger.client.model.Projmembody;
import io.swagger.client.model.Setnewdescbody;
import io.swagger.client.model.Setsprint;
import io.swagger.client.model.Setstory;
import io.swagger.client.model.Sprintstatus;
import io.swagger.client.model.Unfinishedstories;
import io.swagger.client.model.Updmemrole;
import io.swagger.client.model.Updstorycol;
import io.swagger.client.model.Userbody;
import io.swagger.client.model.Usernamebody;
import io.swagger.client.model.Userprojectsbody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Retrieves the current sprint&#39;s status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkSprintTest() throws ApiException {
        Sprintstatus body = null;
        api.checkSprint(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes the user&#39;s account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        Deluserbody body = null;
        api.deleteAccount(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a member from a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMemberTest() throws ApiException {
        Deletemember body = null;
        api.deleteMember(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Edits a story
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editStoryTest() throws ApiException {
        Editstory body = null;
        api.editStory(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the sprint&#39;s status to done
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void endSprintTest() throws ApiException {
        Endsprint body = null;
        api.endSprint(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the current sprint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurSprintTest() throws ApiException {
        Currsprint body = null;
        api.getCurSprint(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the members in a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemebersTest() throws ApiException {
        Projmembody body = null;
        api.getMemebers(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets a story&#39;s sprint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNextSprintTest() throws ApiException {
        Nextsprint body = null;
        api.getNextSprint(body);

        // TODO: test validations
    }
    
    /**
     * Returns last created project id
     *
     * Query for returning the project id that had just been created
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        Lastprojectbody body = null;
        api.getProject(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Queries the given project&#39;s info as name and description
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectInfoTest() throws ApiException {
        Projectinfobody body = null;
        api.getProjectInfo(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all the sprints in a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSprintsTest() throws ApiException {
        Getsprints body = null;
        api.getSprints(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves a project&#39;s stories
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoriesTest() throws ApiException {
        Getstories body = null;
        api.getStories(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves all the stories that are not in the Done column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnfinishedStoriesTest() throws ApiException {
        Unfinishedstories body = null;
        api.getUnfinishedStories(body);

        // TODO: test validations
    }
    
    /**
     * Queries info from the given user
     *
     * Returns name, email and user id from the database with the given username
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserInfoTest() throws ApiException {
        Userbody body = null;
        api.getUserInfo(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a user&#39;s name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserNameTest() throws ApiException {
        Usernamebody body = null;
        api.getUserName(body);

        // TODO: test validations
    }
    
    /**
     * Returns the projects a user is in
     *
     * Queries the project ids from the database with the given user id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserProjectsTest() throws ApiException {
        Userprojectsbody body = null;
        api.getUserProjects(body);

        // TODO: test validations
    }
    
    /**
     * Get user info from database
     *
     * Get user id and username from every user in the database
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersMGetUsersATest() throws ApiException {
        api.getUsersMGetUsersA();

        // TODO: test validations
    }
    
    /**
     * Checks user/password to log in
     *
     * Grant user and password to confirm with the database of it&#39;s existance, proceeds to log in.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginUserTest() throws ApiException {
        Loginbody body = null;
        api.loginUser(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Moves a story to another sprint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveStoryTest() throws ApiException {
        Movestory body = null;
        api.moveStory(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates a sprint for the current project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void newSprintTest() throws ApiException {
        Setsprint body = null;
        api.newSprint(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Inserts into the database every new member
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setMemberTest() throws ApiException {
        Memberbody body = null;
        api.setMember(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates a project&#39;s description
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNewDescTest() throws ApiException {
        Setnewdescbody body = null;
        api.setNewDesc(body);

        // TODO: test validations
    }
    
    /**
     * Creates a project in the database
     *
     * Creates a new project on the database with the given information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProjectTest() throws ApiException {
        Postprojectbody body = null;
        api.setProject(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates a new story in the sprint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setStoryTest() throws ApiException {
        Setstory body = null;
        api.setStory(body);

        // TODO: test validations
    }
    
    /**
     * Post a user in the database
     *
     * Create a new user entry in the database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setUserTest() throws ApiException {
        Postuserbody body = null;
        api.setUser(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a member&#39;s role in a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updRoleTest() throws ApiException {
        Updmemrole body = null;
        api.updRole(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates the column a story is in
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updStoryColTest() throws ApiException {
        Updstorycol body = null;
        api.updStoryCol(body);

        // TODO: test validations
    }
    
    /**
     * Updates user&#39;s name and email
     *
     * Updates the given username&#39;s name and email with the new given name and email
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAllTest() throws ApiException {
        Allupdbody body = null;
        api.updateAll(body);

        // TODO: test validations
    }
    
    /**
     * Updates user&#39;s email
     *
     * Updates the given username&#39;s email with the new given email
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMailTest() throws ApiException {
        Emailupdbody body = null;
        api.updateMail(body);

        // TODO: test validations
    }
    
    /**
     * Updates user&#39;s name
     *
     * Updates the given username&#39;s name with the new given name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNameTest() throws ApiException {
        Nameupdbody body = null;
        api.updateName(body);

        // TODO: test validations
    }
    
    /**
     * Updates user&#39;s password
     *
     * Updates the given username&#39;s password with the new given one
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePassTest() throws ApiException {
        Passupdbody body = null;
        api.updatePass(body);

        // TODO: test validations
    }
    
}
